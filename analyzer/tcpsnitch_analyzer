#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'pp'
require 'oj'
require './lib.rb'
require './opt_parser.rb'

EXECUTABLE = "tcpsnitch_analyzer"
VERSION = '0.1.0'

Oj.default_options = { symbol_keys: true }
options = OptParser.parse(ARGV)
files = ARGV

if files.empty? then 
  error("missing argument, must provide at least 1 file")
  exit 1
end

# We DO NOT want to read the entire JSON files into memory.
# We also DO NOT want to build a Ruby object for the entire JSON array.
#
# Instead, we want to the file line by line, where each line consists of a 
# single event. We then instantiate each event individually and discard them 
# as we read through the file, thus giving O(1) memory consumption.

files.each do |file|
  # IO.each should not read entire file in memory. To verify.
  File.open(file).each_with_index do |line, index|
    next if index == 0 # First line is opening '[' of JSON Array
    next if line.eql? "]" # Last line is closing ']' of JSON Array

    # Parse JSON object
    begin 
      hash = Oj.load(line.chomp(",\n")) # Remove ',\n' after JSON object
    rescue Exception => e 
      error(e)
    end
   
    # Skip if filter does not match
    next unless filter(hash, options.filter)  

    # Extract value
    begin
      val = node_val(hash, options.node_path)
    rescue Exception => e
      error("invalid -n argument: '#{options.node_path}'")
      exit 1
    end

    # Compute on value
    options.stat.add_val(val)
  end
end

puts_options_header(options)
options.stat.print(options)
