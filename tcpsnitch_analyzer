#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'yajl' 
require 'pp'

EXECUTABLE = "tcpsnitch_analyzer"
VERSION = '0.1.0'

def error(msg)
  puts "#{EXECUTABLE}: #{msg}."
  puts "Try '#{EXECUTABLE} -h' for more information."
end

class OptParser 
  def self.parse(args)
    options = OpenStruct.new
    options.verbose = false

    begin
      OptionParser.new do |opts|
        opts.banner = "Usage: #{EXECUTABLE} [-h] [options] [file]..."
        opts.separator ""
        opts.separator "Analyze tcpsnitch JSON traces."
        opts.separator ""
        opts.separator "Options:"

        opts.on_tail("-h", "--help", "show this help text") do 
          puts opts
          exit
        end
      
        opts.on_tail("-v", "--verbose", "verbose mode") do
          options.verbose = true
        end

        opts.on_tail("--version", "show version") do 
          puts VERSION
          exit
        end
      end.parse!(args) # OptionParser
    rescue Exception => e 
      error(e)
      exit 1 
    end

    options
  end # parse
end

options = OptParser.parse(ARGV)
files = ARGV

# We probably don't want to read the entire JSON files into memory, nor do we 
# want to build a Ruby object for the entire file. We should probably do this
# in chunks, see yajl-ruby.
files.each do |file|
  begin
    json = File.read(file)
  rescue Exception => e
    error(e)
    exit 1
  end

  begin
    hash = Yajl::Parser.new.parse(json)
  rescue Exception => e
    error(e)
    exit 1
  end

  events = {}
  hash['events'].each do |ev|
    type = ev['type']
    if events.key?(type) then
      events[type] += 1
    else
      events[type] = 1  
    end
  end

  pp events
end

