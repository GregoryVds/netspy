#!/usr/bin/env bash
set -o nounset
# set -o xtrace
set -e

NAME="tcpsnitch_android"
VERSION=1.0
VERSION_STR="${NAME} version ${VERSION}"
BASE_PROP="be.ucl.tcpsnitch"
LIB="libtcpsnitch.so"
LIBPATH="/data"

# Option default values
OPT_B=0
OPT_C=0
OPT_D=""
OPT_E=1024
OPT_F=2
OPT_L=5
OPT_P=0
OPT_U=0
OPT_T=5000
OPT_V=0

usage() {
        echo "Usage: tcpsnitch_android [-chpv] [ -b <bytes> ] [ -d <dir>]" 
        echo "                 [ -e <events> ] [ -f <lvl> ] [ -i <iface> ]" 
        echo "                 [ -l <lvl> ] [ -t <msec> ] [ -u <usec> ]"
        echo "                 [ --version ] package"
        echo ""
        echo "package     name of package to spy on."
        echo "-b <bytes>  dump tcp_info every <bytes> (0 means NO dump, def 0)."
        echo "-c          activate capture of pcap traces."
        echo "-d <dir>    dir to save traces (defaults to random dir in /tmp)."
        echo "-e <events> dump to JSON file every <events> (def. 1024)."
        echo "-f <lvl>    verbosity of logs to file (0 to 5, defaults to 2)."
        echo "-h          show this help text."
        echo "-l <lvl>    verbosity of logs to stderr (0 to 5, defaults to 2)."  
        echo "-p          activate pretty print of JSON traces."
        echo "-t <msec>   dump to JSON file every <msec> (def. 1000)."
        echo "-u <usec>   dump tcp_info every <usec> (0 means NO dump, def 0)."
        echo "-v          activate verbose output."  
        echo "--version   print tcpsnitch version." 
}

is_integer() {
        [[ "$1" =~ ^[0-9]+$ ]]
}

assert_int() {
        error_msg=$2
        if ! is_integer "$1"; then
                error "$error_msg"
                exit 1
        fi
}

error() {
        msg=$1
        >&2 echo "${NAME}: ${msg}."
        >&2 echo "Try '${NAME} -h' for more information."
}

# Parse options
while getopts ":chpvb:d:e:f:i:l:u:t:-:" opt; do
        case $opt in
                -) # Trick to parse long options with getopts.
                        case "$OPTARG" in
                                version)
                                        echo ${VERSION_STR}
                                        exit 0
                                        ;;
                        esac
                        ;;
                h)
                        usage
                        exit 0
                        ;;
                b)
                        assert_int "$OPTARG" "invalid -b argument: '$OPTARG'" 
                        OPT_B=$OPTARG
                        ;;
                c)
                        OPT_C=1;
                        ;;
                d)
                        if [[ ! -d "$OPTARG" ]] ; then
                                error "invalid -d argument: '$OPTARG'"
                                exit 1
                        fi
                        OPT_D=$OPTARG
                        ;;
                e)
                        assert_int "$OPTARG" "invalid -e argument: '$OPTARG'" 
                        OPT_E=$OPTARG
                        ;;
                f)
                        assert_int "$OPTARG" "invalid -f argument: '$OPTARG'" 
                        OPT_F=$OPTARG
                        ;;
                i)
                        if ! ip link show $OPTARG >/dev/null ; then
                                error "invalid -i argument: '$OPTARG'"
                                exit 1
                        fi
                        OPT_I=$OPTARG
                        ;;
                l)
                        assert_int "$OPTARG" "invalid -l argument: '$OPTARG'" 
                        OPT_L=$OPTARG
                        ;;
                p)
                        OPT_P=1
                        ;;
                u)
                        assert_int "$OPTARG" "invalid -u argument: '$OPTARG'" 
                        OPT_U=$OPTARG
                        ;;
                t)
                        assert_int "$OPTARG" "invalid -t argument: '$OPTARG'"
                        OPT_T=$OPTARG
                        ;;
                v)
                        OPT_V=$((OPT_V+1))
                        ;;
               \?)     
                        error "invalid option"
                        exit 1
                        ;;
        esac
done

# Consume option args
shift $((OPTIND - 1))

# Get package name

exec 3>&2
package=$(./get_package $1 2>&3)
echo "Setting up tcpsnitch for: '${package}'"

# Compile
make 

# Set system properties
adb shell su -c setenforce 0
adb shell su -c chmod 777 /data
adb shell su -c rm -f /data/libtcpsnitch.so

echo "Uploading library to ${LIBPATH}/${LIB}"
adb push ${LIB} ${LIBPATH}

# Prepare logs dir
OPT_D="/data/data/${package}/tcpsnitch"
adb shell su -c mkdir -m 777 -p ${OPT_D}

# Properties are limited to 32 chars includind the NULL byte.
# With "wrap." being 5 chars, we have 26 chars left the app name.
adb shell setprop wrap.${package:0:26} LD_PRELOAD=/data/libtcpsnitch.so

adb shell setprop "$BASE_PROP.opt_b" "$OPT_B"
adb shell setprop "$BASE_PROP.opt_c" "$OPT_C"
adb shell setprop "$BASE_PROP.opt_d" "$OPT_D"
adb shell setprop "$BASE_PROP.opt_e" "$OPT_E"
adb shell setprop "$BASE_PROP.opt_f" "$OPT_F"
adb shell setprop "$BASE_PROP.opt_l" "$OPT_L"
adb shell setprop "$BASE_PROP.opt_p" "$OPT_P"
adb shell setprop "$BASE_PROP.opt_t" "$OPT_T"
adb shell setprop "$BASE_PROP.opt_u" "$OPT_U"
adb shell setprop "$BASE_PROP.opt_v" "$OPT_V"

